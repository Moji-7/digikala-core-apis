{
    "sourceFile": "README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1700570594392,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1700570594392,
            "name": "Commit-0",
            "content": "# ![Node/Express/Mongoose Example App](project-logo.png)\r\n\r\n[![Build Status](https://travis-ci.org/anishkny/node-express-realworld-example-app.svg?branch=master)](https://travis-ci.org/anishkny/node-express-realworld-example-app)\r\n\r\n> ### NestJS codebase containing real world examples (CRUD, auth, advanced patterns, etc) that adheres to the [RealWorld](https://github.com/gothinkster/realworld-example-apps) API spec.\r\n\r\n\r\n----------\r\n\r\n# Getting started\r\n\r\n## Installation\r\n\r\nClone the repository\r\n\r\n    git clone https://github.com/lujakob/nestjs-realworld-example-app.git\r\n\r\nSwitch to the repo folder\r\n\r\n    cd nestjs-realworld-example-app\r\n    \r\nInstall dependencies\r\n    \r\n    npm install\r\n\r\nCopy config file and set JsonWebToken secret key\r\n\r\n    cp src/config.ts.example src/config.ts\r\n    \r\n----------\r\n\r\n## Database\r\n\r\nThe codebase contains examples of two different database abstractions, namely [TypeORM](http://typeorm.io/) and [Prisma](https://www.prisma.io/). \r\n    \r\nThe branch `master` implements TypeORM with a mySQL database.\r\n\r\nThe branch `prisma` implements Prisma with a mySQL database.\r\n\r\n----------\r\n\r\n##### TypeORM\r\n\r\n----------\r\n\r\nCreate a new mysql database with the name `nestjsrealworld`\\\r\n(or the name you specified in the ormconfig.json)\r\n\r\nCopy TypeORM config example file for database settings\r\n\r\n    cp ormconfig.json.example\r\n    \r\nSet mysql database settings in ormconfig.json\r\n\r\n    {\r\n      \"type\": \"mysql\",\r\n      \"host\": \"localhost\",\r\n      \"port\": 3306,\r\n      \"username\": \"your-mysql-username\",\r\n      \"password\": \"your-mysql-password\",\r\n      \"database\": \"authdb\",\r\n      \"entities\": [\"src/**/**.entity{.ts,.js}\"],\r\n      \"synchronize\": true\r\n    }\r\n    \r\nStart local mysql server and create new database 'nestjsrealworld'\r\n\r\nOn application start, tables for all entities will be created.\r\n\r\n----------\r\n\r\n##### Prisma\r\n\r\n----------\r\n\r\nTo run the example with Prisma checkout branch `prisma`, remove the node_modules and run `npm install`\r\n\r\nCreate a new mysql database with the name `nestjsrealworld-prisma` (or the name you specified in `prisma/.env`)\r\n\r\nCopy prisma config example file for database settings\r\n\r\n    cp prisma/.env.example prisma/.env\r\n\r\nSet mysql database settings in prisma/.env\r\n\r\n    DATABASE_URL=\"mysql://USER:PASSWORD@HOST:PORT/DATABASE\"\r\n\r\nTo create all tables in the new database make the database migration from the prisma schema defined in prisma/schema.prisma\r\n\r\n    npx prisma migrate save --experimental\r\n    npx prisma migrate up --experimental\r\n\r\nNow generate the prisma client from the migrated database with the following command\r\n\r\n    npx prisma generate\r\n\r\nThe database tables are now set up and the prisma client is generated. For more information see the docs:\r\n\r\n- https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project-typescript-mysql\r\n\r\n\r\n----------\r\n\r\n## NPM scripts\r\n\r\n- `npm start` - Start application\r\n- `npm run start:watch` - Start application in watch mode\r\n- `npm run test` - run Jest test runner \r\n- `npm run start:prod` - Build application\r\n\r\n----------\r\n\r\n## API Specification\r\n\r\nThis application adheres to the api specifications set by the [Thinkster](https://github.com/gothinkster) team. This helps mix and match any backend with any other frontend without conflicts.\r\n\r\n> [Full API Spec](https://github.com/gothinkster/realworld/tree/master/api)\r\n\r\nMore information regarding the project can be found here https://github.com/gothinkster/realworld\r\n\r\n----------\r\n\r\n## Start application\r\n\r\n- `npm start`\r\n- Test api with `http://localhost:3000/api/articles` in your favourite browser\r\n\r\n----------\r\n\r\n# Authentication\r\n \r\nThis applications uses JSON Web Token (JWT) to handle authentication. The token is passed with each request using the `Authorization` header with `Token` scheme. The JWT authentication middleware handles the validation and authentication of the token. Please check the following sources to learn more about JWT.\r\n\r\n----------\r\n \r\n# Swagger API docs\r\n\r\nThis example repo uses the NestJS swagger module for API documentation. [NestJS Swagger](https://github.com/nestjs/swagger) - [www.swagger.io](https://swagger.io/)        \r\n"
        }
    ]
}