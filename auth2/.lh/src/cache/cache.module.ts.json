{
    "sourceFile": "src/cache/cache.module.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1701927549791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1701927549791,
            "name": "Commit-0",
            "content": "\nimport { CacheModule, CacheModuleOptions, CACHE_MANAGER } from '@nestjs/cache-manager';\nimport { Module, Global, Inject, Injectable } from '@nestjs/common';\n\nimport type { RedisClientOptions } from 'redis';\n//import * as redisStore from 'cache-manager-redis-yet';\nimport * as redisStore from 'cache-manager-redis-store';\n\n@Injectable()\nexport class CacheService {\n  constructor(@Inject(CACHE_MANAGER) private cacheManager: Cache) {}\n\n  async get(key: string) {\n    return await this.cacheManager.get(key);\n  }\n\n  async set(key: string, value: any, ttl?: number) {\n    return await this.cacheManager.set(key, value, ttl);\n  }\n\n  async del(key: string) {\n    return await this.cacheManager.del(key);\n  }\n}\n\n@Global()\n@Module({\n  imports: [\n    CacheModule.registerAsync({\n      useFactory: (): CacheModuleOptions<RedisClientOptions> => ({\n        store: redisStore,\n        host: '127.0.0.1',\n        port: 6379,\n      }),\n    }),\n  ],\n  providers: [MyCacheService],\n  exports: [MyCacheService],\n})\nexport class MyCacheModule {}\n"
        }
    ]
}