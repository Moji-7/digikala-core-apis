{
    "sourceFile": "src/profile/profile.service.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1700646473946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1700646702590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,13 +20,13 @@\n     return await this.userRepository.find();\r\n   }\r\n \r\n   async findOne(options?: DeepPartial<UserEntity>): Promise<ProfileRO> {\r\n-    \r\n     const user = await this.userRepository.findOne({\r\n-      where: { options:options }\r\n+      where: options\r\n     });\r\n     \r\n+\r\n     delete user.id;\r\n     if (user) delete user.password;\r\n     return {profile: user};\r\n   }\r\n@@ -98,8 +98,9 @@\n     if (!followerId || !username) {\r\n       throw new HttpException('FollowerId and username not provided.', HttpStatus.BAD_REQUEST);\r\n     }\r\n \r\n+\r\n     const followingUser = await this.userRepository.findOne({\r\n       where: { username:username }\r\n     });\r\n \r\n"
                },
                {
                    "date": 1700649236966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,12 +19,12 @@\n   async findAll(): Promise<UserEntity[]> {\r\n     return await this.userRepository.find();\r\n   }\r\n \r\n-  async findOne(options?: DeepPartial<UserEntity>): Promise<ProfileRO> {\r\n-    const user = await this.userRepository.findOne({\r\n-      where: options\r\n-    });\r\n+  // async findOne(options?: DeepPartial<UserEntity>): Promise<ProfileRO> {\r\n+  //   const user = await this.userRepository.findOne({\r\n+  //     where: options\r\n+  //   });\r\n     \r\n \r\n     delete user.id;\r\n     if (user) delete user.password;\r\n"
                },
                {
                    "date": 1700649242698,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,12 +25,12 @@\n   //     where: options\r\n   //   });\r\n     \r\n \r\n-    delete user.id;\r\n-    if (user) delete user.password;\r\n-    return {profile: user};\r\n-  }\r\n+  //   delete user.id;\r\n+  //   if (user) delete user.password;\r\n+  //   return {profile: user};\r\n+  // }\r\n \r\n   async findProfile(id: number, followingUsername: string): Promise<ProfileRO> {\r\n     const _profile = await this.userRepository.findOne({\r\n       where: { username:followingUsername }\r\n"
                }
            ],
            "date": 1700646473946,
            "name": "Commit-0",
            "content": "import { HttpStatus, Injectable} from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { UserEntity } from '../user/user.entity';\r\nimport { DeepPartial } from 'typeorm/common/DeepPartial';\r\nimport { ProfileRO, ProfileData } from './profile.interface';\r\nimport {FollowsEntity} from \"./follows.entity\";\r\nimport {HttpException} from \"@nestjs/common/exceptions/http.exception\";\r\n\r\n@Injectable()\r\nexport class ProfileService {\r\n  constructor(\r\n    @InjectRepository(UserEntity)\r\n    private readonly userRepository: Repository<UserEntity>,\r\n    @InjectRepository(FollowsEntity)\r\n    private readonly followsRepository: Repository<FollowsEntity>\r\n  ) {}\r\n\r\n  async findAll(): Promise<UserEntity[]> {\r\n    return await this.userRepository.find();\r\n  }\r\n\r\n  async findOne(options?: DeepPartial<UserEntity>): Promise<ProfileRO> {\r\n    \r\n    const user = await this.userRepository.findOne({\r\n      where: { options:options }\r\n    });\r\n    \r\n    delete user.id;\r\n    if (user) delete user.password;\r\n    return {profile: user};\r\n  }\r\n\r\n  async findProfile(id: number, followingUsername: string): Promise<ProfileRO> {\r\n    const _profile = await this.userRepository.findOne({\r\n      where: { username:followingUsername }\r\n    });\r\n\r\n    if(!_profile) return;\r\n\r\n    let profile: ProfileData = {\r\n      username: _profile.username,\r\n      bio: _profile.bio,\r\n      image: _profile.image\r\n    };\r\n\r\n    const follows = await this.followsRepository.findOne({\r\n      where: { followerId: id, followingId: _profile.id }\r\n    });\r\n    \r\n\r\n    if (id) {\r\n      profile.following = !!follows;\r\n    }\r\n\r\n    return {profile};\r\n  }\r\n\r\n  async follow(followerEmail: string, username: string): Promise<ProfileRO> {\r\n    if (!followerEmail || !username) {\r\n      throw new HttpException('Follower email and username not provided.', HttpStatus.BAD_REQUEST);\r\n    }\r\n\r\n  \r\n    const followingUser = await this.userRepository.findOne({\r\n      where: { username:username }\r\n    });\r\n const followerUser = await this.userRepository.findOne({\r\n      where: { email:followerEmail }\r\n    });\r\n    if (followingUser.email === followerEmail) {\r\n      throw new HttpException('FollowerEmail and FollowingId cannot be equal.', HttpStatus.BAD_REQUEST);\r\n    }\r\n    const _follows = await this.followsRepository.findOne({\r\n      where: { followerId: followerUser.id, followingId: followingUser.id }\r\n    });\r\n    \r\n    \r\n\r\n    if (!_follows) {\r\n      const follows = new FollowsEntity();\r\n      follows.followerId = followerUser.id;\r\n      follows.followingId = followingUser.id;\r\n      await this.followsRepository.save(follows);\r\n    }\r\n\r\n    let profile: ProfileData = {\r\n      username: followingUser.username,\r\n      bio: followingUser.bio,\r\n      image: followingUser.image,\r\n      following: true\r\n    };\r\n\r\n    return {profile};\r\n  }\r\n\r\n  async unFollow(followerId: number, username: string): Promise<ProfileRO> {\r\n    if (!followerId || !username) {\r\n      throw new HttpException('FollowerId and username not provided.', HttpStatus.BAD_REQUEST);\r\n    }\r\n\r\n    const followingUser = await this.userRepository.findOne({\r\n      where: { username:username }\r\n    });\r\n\r\n    if (followingUser.id === followerId) {\r\n      throw new HttpException('FollowerId and FollowingId cannot be equal.', HttpStatus.BAD_REQUEST);\r\n    }\r\n    const followingId = followingUser.id;\r\n    await this.followsRepository.delete({followerId, followingId});\r\n\r\n    let profile: ProfileData = {\r\n      username: followingUser.username,\r\n      bio: followingUser.bio,\r\n      image: followingUser.image,\r\n      following: false\r\n    };\r\n\r\n    return {profile};\r\n  }\r\n\r\n}\r\n"
        }
    ]
}