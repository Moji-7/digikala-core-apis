{
    "sourceFile": "src/user/user.controller.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1700660971903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1700661322033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n \r\n   @UsePipes(new ValidationPipe())\r\n   @Post('users/login')\r\n   async login(@Body('user') loginUserDto: LoginUserDto): Promise<UserRO> {\r\n-    return null;\r\n+   // return null;\r\n     const _user = await this.userService.findOne(loginUserDto);\r\n \r\n     const errors = {User: ' not found'};\r\n     if (!_user) throw new HttpException({errors}, 401);\r\n"
                },
                {
                    "date": 1701930215566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,15 +9,18 @@\n \r\n import {\r\n   ApiBearerAuth, ApiTags\r\n } from '@nestjs/swagger';\r\n+import { MyCacheService } from '../myCache/myCache.service';\r\n \r\n @ApiBearerAuth()\r\n @ApiTags('user')\r\n @Controller()\r\n export class UserController {\r\n \r\n-  constructor(private readonly userService: UserService) {}\r\n+  constructor(private readonly userService: UserService,\r\n+    private readonly myCacheService: MyCacheService\r\n+    ) {}\r\n \r\n   @Get('user')\r\n   async findMe(@User('email') email: string): Promise<UserRO> {\r\n     return await this.userService.findByEmail(email);\r\n@@ -52,5 +55,15 @@\n     const {email, username, bio, image} = _user;\r\n     const user = {email, token, username, bio, image};\r\n     return {user}\r\n   }\r\n+    // A simple API to test the cache functionality\r\n+    @Get('users/cacheworks')\r\n+    async cacheworks(): Promise<string> {\r\n+      // Set a key-value pair in the cache\r\n+      await this.myCacheService.set('foo', 'bar', 60); // cache for one minute\r\n+      // Get the value of the key from the cache\r\n+      const value = await this.myCacheService.get('foo');\r\n+      // Return the value as a string\r\n+      return value;\r\n+    }\r\n }\r\n"
                },
                {
                    "date": 1701932924105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,69 +1,79 @@\n-import { Get, Post, Body, Put, Delete, Param, Controller, UsePipes } from '@nestjs/common';\r\n-import { Request } from 'express';\r\n-import { UserService } from './user.service';\r\n-import { UserRO } from './user.interface';\r\n-import { CreateUserDto, UpdateUserDto, LoginUserDto } from './dto';\r\n-import { HttpException } from '@nestjs/common/exceptions/http.exception';\r\n-import { User } from './user.decorator';\r\n-import { ValidationPipe } from '../shared/pipes/validation.pipe';\r\n-\r\n import {\r\n-  ApiBearerAuth, ApiTags\r\n-} from '@nestjs/swagger';\r\n-import { MyCacheService } from '../myCache/myCache.service';\r\n+  Get,\r\n+  Post,\r\n+  Body,\r\n+  Put,\r\n+  Delete,\r\n+  Param,\r\n+  Controller,\r\n+  UsePipes,\r\n+} from \"@nestjs/common\";\r\n+import { Request } from \"express\";\r\n+import { UserService } from \"./user.service\";\r\n+import { UserRO } from \"./user.interface\";\r\n+import { CreateUserDto, UpdateUserDto, LoginUserDto } from \"./dto\";\r\n+import { HttpException } from \"@nestjs/common/exceptions/http.exception\";\r\n+import { User } from \"./user.decorator\";\r\n+import { ValidationPipe } from \"../shared/pipes/validation.pipe\";\r\n \r\n+import { ApiBearerAuth, ApiTags } from \"@nestjs/swagger\";\r\n+import { MyCacheService } from \"../myCache/myCache.service\";\r\n+\r\n @ApiBearerAuth()\r\n-@ApiTags('user')\r\n+@ApiTags(\"user\")\r\n @Controller()\r\n export class UserController {\r\n-\r\n-  constructor(private readonly userService: UserService,\r\n+  constructor(\r\n+    private readonly userService: UserService,\r\n     private readonly myCacheService: MyCacheService\r\n-    ) {}\r\n+  ) {}\r\n \r\n-  @Get('user')\r\n-  async findMe(@User('email') email: string): Promise<UserRO> {\r\n+  @Get(\"user\")\r\n+  async findMe(@User(\"email\") email: string): Promise<UserRO> {\r\n     return await this.userService.findByEmail(email);\r\n   }\r\n \r\n-  @Put('user')\r\n-  async update(@User('id') userId: number, @Body('user') userData: UpdateUserDto) {\r\n+  @Put(\"user\")\r\n+  async update(\r\n+    @User(\"id\") userId: number,\r\n+    @Body(\"user\") userData: UpdateUserDto\r\n+  ) {\r\n     return await this.userService.update(userId, userData);\r\n   }\r\n \r\n   @UsePipes(new ValidationPipe())\r\n-  @Post('users')\r\n-  async create(@Body('user') userData: CreateUserDto) {\r\n+  @Post(\"users\")\r\n+  async create(@Body(\"user\") userData: CreateUserDto) {\r\n     return this.userService.create(userData);\r\n   }\r\n \r\n-  @Delete('users/:slug')\r\n+  @Delete(\"users/:slug\")\r\n   async delete(@Param() params) {\r\n     return await this.userService.delete(params.slug);\r\n   }\r\n \r\n   @UsePipes(new ValidationPipe())\r\n-  @Post('users/login')\r\n-  async login(@Body('user') loginUserDto: LoginUserDto): Promise<UserRO> {\r\n-   // return null;\r\n+  @Post(\"users/login\")\r\n+  async login(@Body(\"user\") loginUserDto: LoginUserDto): Promise<UserRO> {\r\n+    // return null;\r\n     const _user = await this.userService.findOne(loginUserDto);\r\n \r\n-    const errors = {User: ' not found'};\r\n-    if (!_user) throw new HttpException({errors}, 401);\r\n+    const errors = { User: \" not found\" };\r\n+    if (!_user) throw new HttpException({ errors }, 401);\r\n \r\n     const token = await this.userService.generateJWT(_user);\r\n-    const {email, username, bio, image} = _user;\r\n-    const user = {email, token, username, bio, image};\r\n-    return {user}\r\n+    const { email, username, bio, image } = _user;\r\n+    const user = { email, token, username, bio, image };\r\n+    return { user };\r\n   }\r\n-    // A simple API to test the cache functionality\r\n-    @Get('users/cacheworks')\r\n-    async cacheworks(): Promise<string> {\r\n-      // Set a key-value pair in the cache\r\n-      await this.myCacheService.set('foo', 'bar', 60); // cache for one minute\r\n-      // Get the value of the key from the cache\r\n-      const value = await this.myCacheService.get('foo');\r\n-      // Return the value as a string\r\n-      return value;\r\n-    }\r\n+  // A simple API to test the cache functionality\r\n+  @Get(\"users/cacheworks\")\r\n+  async cacheworks(): Promise<string> {\r\n+    // Set a key-value pair in the cache\r\n+    await this.myCacheService.set(\"foo\", \"bar\", 60); // cache for one minute\r\n+    // Get the value of the key from the cache\r\n+    const value = await this.myCacheService.get(\"foo\");\r\n+    // Return the value as a string\r\n+    return value;\r\n+  }\r\n }\r\n"
                },
                {
                    "date": 1701933267313,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,8 +63,9 @@\n \r\n     const token = await this.userService.generateJWT(_user);\r\n     const { email, username, bio, image } = _user;\r\n     const user = { email, token, username, bio, image };\r\n+    await this.userService.storeToken(token, user); // store token in Redis\r\n     return { user };\r\n   }\r\n   // A simple API to test the cache functionality\r\n   @Get(\"users/cacheworks\")\r\n"
                },
                {
                    "date": 1701934230561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n \r\n     const token = await this.userService.generateJWT(_user);\r\n     const { email, username, bio, image } = _user;\r\n     const user = { email, token, username, bio, image };\r\n-    await this.userService.storeToken(token, user); // store token in Redis\r\n+    await this.userService.cacheToken(token, user); // store token in Redis\r\n     return { user };\r\n   }\r\n   // A simple API to test the cache functionality\r\n   @Get(\"users/cacheworks\")\r\n"
                }
            ],
            "date": 1700660971903,
            "name": "Commit-0",
            "content": "import { Get, Post, Body, Put, Delete, Param, Controller, UsePipes } from '@nestjs/common';\r\nimport { Request } from 'express';\r\nimport { UserService } from './user.service';\r\nimport { UserRO } from './user.interface';\r\nimport { CreateUserDto, UpdateUserDto, LoginUserDto } from './dto';\r\nimport { HttpException } from '@nestjs/common/exceptions/http.exception';\r\nimport { User } from './user.decorator';\r\nimport { ValidationPipe } from '../shared/pipes/validation.pipe';\r\n\r\nimport {\r\n  ApiBearerAuth, ApiTags\r\n} from '@nestjs/swagger';\r\n\r\n@ApiBearerAuth()\r\n@ApiTags('user')\r\n@Controller()\r\nexport class UserController {\r\n\r\n  constructor(private readonly userService: UserService) {}\r\n\r\n  @Get('user')\r\n  async findMe(@User('email') email: string): Promise<UserRO> {\r\n    return await this.userService.findByEmail(email);\r\n  }\r\n\r\n  @Put('user')\r\n  async update(@User('id') userId: number, @Body('user') userData: UpdateUserDto) {\r\n    return await this.userService.update(userId, userData);\r\n  }\r\n\r\n  @UsePipes(new ValidationPipe())\r\n  @Post('users')\r\n  async create(@Body('user') userData: CreateUserDto) {\r\n    return this.userService.create(userData);\r\n  }\r\n\r\n  @Delete('users/:slug')\r\n  async delete(@Param() params) {\r\n    return await this.userService.delete(params.slug);\r\n  }\r\n\r\n  @UsePipes(new ValidationPipe())\r\n  @Post('users/login')\r\n  async login(@Body('user') loginUserDto: LoginUserDto): Promise<UserRO> {\r\n    return null;\r\n    const _user = await this.userService.findOne(loginUserDto);\r\n\r\n    const errors = {User: ' not found'};\r\n    if (!_user) throw new HttpException({errors}, 401);\r\n\r\n    const token = await this.userService.generateJWT(_user);\r\n    const {email, username, bio, image} = _user;\r\n    const user = {email, token, username, bio, image};\r\n    return {user}\r\n  }\r\n}\r\n"
        }
    ]
}