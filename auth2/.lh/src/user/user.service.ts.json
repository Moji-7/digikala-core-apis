{
    "sourceFile": "src/user/user.service.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1700644744366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1700644786741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,11 @@\n \r\n   }\r\n \r\n   async update(id: number, dto: UpdateUserDto): Promise<UserEntity> {\r\n-    let toUpdate = await this.userRepository.findOne(id);\r\n+    let toUpdate  = await this.userRepository.findOne({\r\n+      where: {id :  id}\r\n+    });\r\n     delete toUpdate.password;\r\n     delete toUpdate.favorites;\r\n \r\n     let updated = Object.assign(toUpdate, dto);\r\n@@ -86,9 +88,11 @@\n     return await this.userRepository.delete({ email: email});\r\n   }\r\n \r\n   async findById(id: number): Promise<UserRO>{\r\n-    const user = await this.userRepository.findOne(id);\r\n+    const user = await this.userRepository.findOne({\r\n+      where: {id :  id}\r\n+    });\r\n \r\n     if (!user) {\r\n       const errors = {User: ' not found'};\r\n       throw new HttpException({errors}, 401);\r\n"
                },
                {
                    "date": 1700644886410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,11 @@\n     return this.buildUserRO(user);\r\n   }\r\n \r\n   async findByEmail(email: string): Promise<UserRO>{\r\n-    const user = await this.userRepository.findOne({email: email});\r\n+    let user  = await this.userRepository.findOne({\r\n+      where: {email :  email}\r\n+    });\r\n     return this.buildUserRO(user);\r\n   }\r\n \r\n   public generateJWT(user) {\r\n"
                },
                {
                    "date": 1700661322020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,9 @@\n     return await this.userRepository.find();\r\n   }\r\n \r\n   async findOne({email, password}: LoginUserDto): Promise<UserEntity> {\r\n+   \r\n     const user  = await this.userRepository.findOne({\r\n       where: {email :  email}\r\n     });\r\n     if (!user) {\r\n@@ -40,13 +41,13 @@\n   async create(dto: CreateUserDto): Promise<UserRO> {\r\n \r\n     // check uniqueness of username/email\r\n     const {username, email, password} = dto;\r\n-    const qb = await getRepository(UserEntity)\r\n-      .createQueryBuilder('user')\r\n+  \r\n+      const qb = await this.userRepository\r\n+      .createQueryBuilder(\"user\")\r\n       .where('user.username = :username', { username })\r\n       .orWhere('user.email = :email', { email });\r\n-\r\n     const user = await qb.getOne();\r\n \r\n     if (user) {\r\n       const errors = {username: 'Username and email must be unique.'};\r\n"
                },
                {
                    "date": 1701862860102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { Injectable } from '@nestjs/common';\r\n+import { Inject, Injectable } from '@nestjs/common';\r\n import { InjectRepository } from '@nestjs/typeorm';\r\n import { Repository, getRepository, DeleteResult } from 'typeorm';\r\n import { UserEntity } from './user.entity';\r\n import {CreateUserDto, LoginUserDto, UpdateUserDto} from './dto';\r\n@@ -9,14 +9,18 @@\n import { validate } from 'class-validator';\r\n import { HttpException } from '@nestjs/common/exceptions/http.exception';\r\n import { HttpStatus } from '@nestjs/common';\r\n import * as argon2 from 'argon2';\r\n+import { RedisService } from 'nestjs-redis';\r\n+import { CACHE_MANAGER } from '@nestjs/cache-manager';\r\n+import { Cache } from 'cache-manager';\r\n \r\n @Injectable()\r\n export class UserService {\r\n   constructor(\r\n     @InjectRepository(UserEntity)\r\n-    private readonly userRepository: Repository<UserEntity>\r\n+    private readonly userRepository: Repository<UserEntity>,\r\n+    @Inject(CACHE_MANAGER) private cacheManager: Cache{}\r\n   ) {}\r\n \r\n   async findAll(): Promise<UserEntity[]> {\r\n     return await this.userRepository.find();\r\n"
                },
                {
                    "date": 1701868813933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n import { validate } from 'class-validator';\r\n import { HttpException } from '@nestjs/common/exceptions/http.exception';\r\n import { HttpStatus } from '@nestjs/common';\r\n import * as argon2 from 'argon2';\r\n-import { RedisService } from 'nestjs-redis';\r\n+\r\n import { CACHE_MANAGER } from '@nestjs/cache-manager';\r\n import { Cache } from 'cache-manager';\r\n \r\n @Injectable()\r\n"
                },
                {
                    "date": 1701925692713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n export class UserService {\r\n   constructor(\r\n     @InjectRepository(UserEntity)\r\n     private readonly userRepository: Repository<UserEntity>,\r\n-    @Inject(CACHE_MANAGER) private cacheManager: Cache{}\r\n+    @Inject(CACHE_MANAGER) private cacheManager: Cache\r\n   ) {}\r\n \r\n   async findAll(): Promise<UserEntity[]> {\r\n     return await this.userRepository.find();\r\n"
                },
                {
                    "date": 1701927733078,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,17 +10,14 @@\n import { HttpException } from '@nestjs/common/exceptions/http.exception';\r\n import { HttpStatus } from '@nestjs/common';\r\n import * as argon2 from 'argon2';\r\n \r\n-import { CACHE_MANAGER } from '@nestjs/cache-manager';\r\n-import { Cache } from 'cache-manager';\r\n \r\n @Injectable()\r\n export class UserService {\r\n   constructor(\r\n     @InjectRepository(UserEntity)\r\n     private readonly userRepository: Repository<UserEntity>,\r\n-    @Inject(CACHE_MANAGER) private cacheManager: Cache\r\n   ) {}\r\n \r\n   async findAll(): Promise<UserEntity[]> {\r\n     return await this.userRepository.find();\r\n"
                },
                {
                    "date": 1701929906422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n @Injectable()\r\n export class UserService {\r\n   constructor(\r\n     @InjectRepository(UserEntity)\r\n-    private readonly userRepository: Repository<UserEntity>,\r\n+    private readonly userRepository: Repository<UserEntity>\r\n   ) {}\r\n \r\n   async findAll(): Promise<UserEntity[]> {\r\n     return await this.userRepository.find();\r\n"
                },
                {
                    "date": 1701932924091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,15 +9,17 @@\n import { validate } from 'class-validator';\r\n import { HttpException } from '@nestjs/common/exceptions/http.exception';\r\n import { HttpStatus } from '@nestjs/common';\r\n import * as argon2 from 'argon2';\r\n+import { MyCacheService } from '../myCache/myCache.service';\r\n \r\n \r\n @Injectable()\r\n export class UserService {\r\n   constructor(\r\n     @InjectRepository(UserEntity)\r\n-    private readonly userRepository: Repository<UserEntity>\r\n+    private readonly userRepository: Repository<UserEntity>,\r\n+    private readonly myCacheService: MyCacheService\r\n   ) {}\r\n \r\n   async findAll(): Promise<UserEntity[]> {\r\n     return await this.userRepository.find();\r\n"
                },
                {
                    "date": 1701933267315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,5 +136,9 @@\n     };\r\n \r\n     return {user: userRO};\r\n   }\r\n+  async storeToken(token, user) {\r\n+    const client = await this.myCacheService.getClient();\r\n+    await client.setex(token, 3600, JSON.stringify(user)); // store token in Redis with expiration time of 1 hour\r\n+  }\r\n }\r\n"
                },
                {
                    "date": 1701934235901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,9 +136,9 @@\n     };\r\n \r\n     return {user: userRO};\r\n   }\r\n-  async storeToken(token, user) {\r\n+  async cacheToken(token, user) {\r\n     const client = await this.myCacheService.getClient();\r\n     await client.setex(token, 3600, JSON.stringify(user)); // store token in Redis with expiration time of 1 hour\r\n   }\r\n }\r\n"
                }
            ],
            "date": 1700644744366,
            "name": "Commit-0",
            "content": "import { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository, getRepository, DeleteResult } from 'typeorm';\r\nimport { UserEntity } from './user.entity';\r\nimport {CreateUserDto, LoginUserDto, UpdateUserDto} from './dto';\r\nconst jwt = require('jsonwebtoken');\r\nimport { SECRET } from '../config';\r\nimport { UserRO } from './user.interface';\r\nimport { validate } from 'class-validator';\r\nimport { HttpException } from '@nestjs/common/exceptions/http.exception';\r\nimport { HttpStatus } from '@nestjs/common';\r\nimport * as argon2 from 'argon2';\r\n\r\n@Injectable()\r\nexport class UserService {\r\n  constructor(\r\n    @InjectRepository(UserEntity)\r\n    private readonly userRepository: Repository<UserEntity>\r\n  ) {}\r\n\r\n  async findAll(): Promise<UserEntity[]> {\r\n    return await this.userRepository.find();\r\n  }\r\n\r\n  async findOne({email, password}: LoginUserDto): Promise<UserEntity> {\r\n    const user  = await this.userRepository.findOne({\r\n      where: {email :  email}\r\n    });\r\n    if (!user) {\r\n      return null;\r\n    }\r\n\r\n    if (await argon2.verify(user.password, password)) {\r\n      return user;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  async create(dto: CreateUserDto): Promise<UserRO> {\r\n\r\n    // check uniqueness of username/email\r\n    const {username, email, password} = dto;\r\n    const qb = await getRepository(UserEntity)\r\n      .createQueryBuilder('user')\r\n      .where('user.username = :username', { username })\r\n      .orWhere('user.email = :email', { email });\r\n\r\n    const user = await qb.getOne();\r\n\r\n    if (user) {\r\n      const errors = {username: 'Username and email must be unique.'};\r\n      throw new HttpException({message: 'Input data validation failed', errors}, HttpStatus.BAD_REQUEST);\r\n\r\n    }\r\n\r\n    // create new user\r\n    let newUser = new UserEntity();\r\n    newUser.username = username;\r\n    newUser.email = email;\r\n    newUser.password = password;\r\n    newUser.articles = [];\r\n\r\n    const errors = await validate(newUser);\r\n    if (errors.length > 0) {\r\n      const _errors = {username: 'Userinput is not valid.'};\r\n      throw new HttpException({message: 'Input data validation failed', _errors}, HttpStatus.BAD_REQUEST);\r\n\r\n    } else {\r\n      const savedUser = await this.userRepository.save(newUser);\r\n      return this.buildUserRO(savedUser);\r\n    }\r\n\r\n  }\r\n\r\n  async update(id: number, dto: UpdateUserDto): Promise<UserEntity> {\r\n    let toUpdate = await this.userRepository.findOne(id);\r\n    delete toUpdate.password;\r\n    delete toUpdate.favorites;\r\n\r\n    let updated = Object.assign(toUpdate, dto);\r\n    return await this.userRepository.save(updated);\r\n  }\r\n\r\n  async delete(email: string): Promise<DeleteResult> {\r\n    return await this.userRepository.delete({ email: email});\r\n  }\r\n\r\n  async findById(id: number): Promise<UserRO>{\r\n    const user = await this.userRepository.findOne(id);\r\n\r\n    if (!user) {\r\n      const errors = {User: ' not found'};\r\n      throw new HttpException({errors}, 401);\r\n    }\r\n\r\n    return this.buildUserRO(user);\r\n  }\r\n\r\n  async findByEmail(email: string): Promise<UserRO>{\r\n    const user = await this.userRepository.findOne({email: email});\r\n    return this.buildUserRO(user);\r\n  }\r\n\r\n  public generateJWT(user) {\r\n    let today = new Date();\r\n    let exp = new Date(today);\r\n    exp.setDate(today.getDate() + 60);\r\n\r\n    return jwt.sign({\r\n      id: user.id,\r\n      username: user.username,\r\n      email: user.email,\r\n      exp: exp.getTime() / 1000,\r\n    }, SECRET);\r\n  };\r\n\r\n  private buildUserRO(user: UserEntity) {\r\n    const userRO = {\r\n      id: user.id,\r\n      username: user.username,\r\n      email: user.email,\r\n      bio: user.bio,\r\n      token: this.generateJWT(user),\r\n      image: user.image\r\n    };\r\n\r\n    return {user: userRO};\r\n  }\r\n}\r\n"
        }
    ]
}